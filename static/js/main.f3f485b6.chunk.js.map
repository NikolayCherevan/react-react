{"version":3,"sources":["Containers/Content/Content.jsx","Constants/routes.js","Containers/Dashboard/AboutMe.jsx","Containers/Dashboard/Contacts.jsx","Containers/Dashboard/MyProjects.jsx","Containers/Dashboard/Reviews.jsx","Containers/Dashboard/NotFound.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","Layout","Content","Footer","Sider","SiderDemo","console","log","this","props","children","breakpoint","collapsedWidth","onBreakpoint","broken","onCollapse","collapsed","type","className","theme","mode","defaultSelectedKeys","Item","key","to","style","margin","textAlign","React","Component","AboutMe","padding","background","minHeight","Contacts","Projects","Reviews","NotFound","history","createBrowserHistory","App","exact","path","render","Home","MyProjects","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iXAQQA,EAAmCC,IAAnCD,OAAQE,EAA2BD,IAA3BC,QAASC,EAAkBF,IAAlBE,OAAQC,EAAUH,IAAVG,MAkElBC,E,iLA5DX,OADAC,QAAQC,IAAIC,KAAKC,MAAMC,UAGrB,kBAAC,IAAD,KACE,kBAACN,EAAD,CACEO,WAAW,KACXC,eAAe,IACfC,aAAc,SAAAC,KAEdC,WAAY,SAACC,EAAWC,MAGxB,yBAAKC,UAAU,SACf,kBAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,SAASC,oBAAqB,CAAC,MACrD,kBAAC,IAAKC,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMN,KAAK,SACT,kBAAC,IAAD,CAAMO,GC7BD,aD6BL,aAKJ,kBAAC,IAAKF,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMN,KAAK,iBAET,kBAAC,IAAD,CAAMO,GCnCE,gBDmCR,gBAKJ,kBAAC,IAAKF,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMN,KAAK,WAET,kBAAC,IAAD,CAAMO,GC1CC,YD0CP,WAEQ,KAGZ,kBAAC,IAAKF,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMN,KAAK,SAER,IACD,kBAAC,IAAD,CAAMO,GCrDE,aDqDR,eAOR,kBAAC,IAAD,KACE,kBAACxB,EAAD,eACA,kBAACE,EAAD,CAASuB,MAAO,CAAEC,OAAQ,gBACzBlB,KAAKC,MAAMC,UAEZ,kBAACP,EAAD,CAAQsB,MAAO,CAAEE,UAAW,kB,GAxDdC,IAAMC,WEKfC,EAVC,WACZ,OACI,6BAASZ,UAAW,iBACjB,yBAAKO,MAAO,CAAEM,QAAS,GAAIC,WAAY,OAAQC,UAAW,MAA1D,uBACqB,gCCMjBC,EAVE,WACb,OACI,6BAAShB,UAAW,iBAChB,yBAAKO,MAAO,CAAEM,QAAS,GAAIC,WAAY,OAAQC,UAAW,MAA1D,kBCOGE,EAVE,WACb,OACI,6BAASjB,UAAW,iBAClB,yBAAKO,MAAO,CAAEM,QAAS,GAAIC,WAAY,OAAQC,UAAW,MAA1D,cCKKG,EARC,WACZ,OACI,6BAASlB,UAAW,eACpB,yBAAKO,MAAO,CAAEM,QAAS,GAAIC,WAAY,OAAQC,UAAW,MAA1D,YCIOI,EAVE,WACb,OACI,6BAASnB,UAAU,qBAEf,wBAAIA,UAAY,iBAAhB,6B,QCUCoB,EAAWC,cAsBTC,EApBH,WAEV,OACE,kBAAC,IAAD,CAASF,QAASA,GAEd,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,OAAO,EAAMC,KNrBZ,IMqB6BC,OAAQC,IAC7C,kBAAC,IAAD,CAAOH,OAAO,EAAMC,KN1BX,YM0B6BC,OAAQb,IAC9C,kBAAC,IAAD,CAAOW,OAAO,EAAMC,KN1BR,YM0B6BC,OAAQT,IACjD,kBAAC,IAAD,CAAOO,OAAO,EAAMC,KN1BR,eM0B6BC,OAAQE,IACjD,kBAAC,IAAD,CAAOJ,OAAO,EAAMC,KN1BT,WM0B6BC,OAAQP,IAChD,kBAAC,IAAD,CAAOK,OAAO,EAAMK,UAAWT,QClBvBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAST,OAAO,kBAAC,EAAD,MAASU,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f3f485b6.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"antd/dist/antd.css\";\nimport { Layout, Menu, Icon } from \"antd\";\nimport \"./style.scss\";\nimport * as path from \"../../Constants/routes\";\n\nimport {Link  } from \"react-router-dom\";\nconst { Header, Content, Footer, Sider } = Layout;\n\nclass SiderDemo extends React.Component {\n\n  render() {\n    console.log(this.props.children)\n    return (\n      \n      <Layout>\n        <Sider\n          breakpoint=\"lg\"\n          collapsedWidth=\"0\"\n          onBreakpoint={broken => {\n          }}\n          onCollapse={(collapsed, type) => {\n          }}\n        >\n          <div className=\"logo\" />\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[\"1\"]}>\n            <Menu.Item key=\"1\">\n              <Icon type=\"user\" />\n                <Link to={path.ABOUT}>\n              About me\n                </Link>\n             \n            </Menu.Item>\n            <Menu.Item key=\"2\">\n              <Icon type=\"video-camera\" />\n            \n                <Link to={path.PROJECTS}>\n                My projects \n                </Link>\n             \n            </Menu.Item>\n            <Menu.Item key=\"3\">\n              <Icon type=\"upload\" />\n \n                <Link to={path.REVIEWS}>\n            Reviews \n                </Link>{\" \"}\n             \n            </Menu.Item>\n            <Menu.Item key=\"4\">\n              <Icon type=\"user\" />\n          \n                {\" \"}\n                <Link to={path.CONTACTS}>\n                  Contacts \n                </Link>\n            \n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout>\n          <Header> Test </Header>\n          <Content style={{ margin: \"24px 16px 0\" }}>\n          {this.props.children}\n          </Content>\n          <Footer style={{ textAlign: \"center\" }}>\n        \n          </Footer>\n        </Layout>\n      </Layout>\n    );\n  }\n}\nexport default SiderDemo;\n","export const ABOUT = '/about-me';\nexport const CONTACTS = '/contacts';\nexport const PROJECTS = \"/my-projects\";\nexport const REVIEWS = '/reviews';\nexport const HOME = \"/\";\n","import React from 'react';\n\n\n\n\nconst AboutMe = () => {\n    return ( \n        <section className= 'about-section'> \n           <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n            Front-end developer <br/>\n</div>\n         </section>\n    )\n}\n\nexport default AboutMe;","import React from 'react';\n\n\n\n\nconst Contacts = () => {\n    return ( \n        <section className= 'about-section'> \n            <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n          rthrthrthrt </div>\n         </section>\n        \n    )\n}\n\nexport default Contacts;","import React from 'react';\n\n\n\n\nconst Projects = () => {\n    return ( \n        <section className= 'about-section'> \n          <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n          refrferf\n          </div>\n         </section>\n    )\n}\n\nexport default Projects;","import React from 'react';\n\n\n\n\nconst Reviews = () => {\n    return ( \n        <section className= 'rev-section'> \n        <div style={{ padding: 24, background: '#fff', minHeight: 360 }}> cool </div>\n         </section>\n    )\n}\n\nexport default Reviews;","import React from 'react';\n\nconst NotFound = () => {\n    return (\n        <section className=\"not-found-section\">\n      \n            <h1 className = \"sorry-message\"> Sorry, page not  found\n </h1> \n           \n        </section>\n    );\n};\nexport default NotFound;","import React from \"react\";\nimport \"./App.css\";\n\nimport { Route, Router} from \"react-router-dom\";\nimport SiderDemo from \"./Containers/Content/Content\";\nimport AboutMe from \"./Containers/Dashboard/AboutMe\";\nimport Contacts from \"./Containers/Dashboard/Contacts\";\nimport Home from \"./Containers/Dashboard/Contacts\";\nimport MyProjects from \"./Containers/Dashboard/MyProjects\";\nimport Reviews from \"./Containers/Dashboard/Reviews\";\n\nimport * as path from \"../../react-react/src/Constants/routes\";\nimport NotFound from \"./Containers/Dashboard/NotFound\";\nimport { Switch} from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\nexport const history =  createBrowserHistory(); \n\nconst App = () => {\n\n  return (\n    <Router  history={history} >\n\n        <SiderDemo>\n          <Switch>\n            <Route exact={true} path={path.HOME} render={Home} />\n            <Route exact={true} path={path.ABOUT} render={AboutMe} />\n            <Route exact={true} path={path.CONTACTS} render={Contacts} />\n            <Route exact={true} path={path.PROJECTS} render={MyProjects} />\n            <Route exact={true} path={path.REVIEWS} render={Reviews} />\n            <Route exact={true} component={NotFound} />\n          </Switch>\n        </SiderDemo>\n\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}